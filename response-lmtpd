#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''Response Project - LMTP Daemon'''

# Copyright (C) 2009 John Feuerstein <john@feurix.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

from globals import __author__, __copyright__, __license__, __version__

import os
import signal
import sys
import time
import logger
import exception

from asyncore import loop
from config import Config
from daemon import daemonize
from pidfile import PidFile
from optparse import OptionParser
from lmtpd import LMTPServer

# Option parsing
version = '%prog version ' + __version__
usage = 'Usage: %prog [options]'

parser = OptionParser(usage=usage, version=version)

parser.add_option('-n', '--no-daemon', action='store_true', dest='nodaemon',
        help='do not daemonize',)
parser.add_option('-d', '--debug', action='store_true', dest='debug',
        help='debug mode')
parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
        help='verbose mode')
parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
        help='only log errors')
parser.add_option('-s', '--syslog', action='store_true', dest='syslog',
        help='log to syslog')
parser.add_option('--syslog-facility', type='string', action='store',
        dest='syslog_facility', default='MAIL',
        help='specify the syslog facility (default: MAIL)')
parser.add_option('-c', '--config', action='store', dest='config_file',
        help='specify an alternate path to the config file,     ' \
             'default: /etc/response.cfg',
        default='/etc/response.cfg')
parser.add_option('-p', '--pid-file', action='store', dest='pid_file',
        help='specify an alternate path to the pid file,     ' \
             'default: /var/run/response/lmtpd.pid',
        default='/var/run/response/lmtpd.pid')

(options, args) = parser.parse_args()

if not options.nodaemon:
    options.syslog = True

# Logging
log = logger.getLog(
        debug=options.debug,
        verbose=options.verbose,
        quiet=options.quiet,
        syslog=options.syslog,
        syslog_facility=options.syslog_facility,
        )

# Signal handling
def signal_handler(signum, frame):
    if signum == signal.SIGINT:
        log.warning('Received SIGINT, exiting...')
        raise exception.SignalReceived(signum, 'SIGINT')
    elif signum == signal.SIGHUP:
        log.warning('Received SIGHUP, reloading configuration!')
        raise exception.SignalReceived(signum, 'SIGHUP')
    elif signum == signal.SIGTERM:
        log.warning('Received SIGTERM, shutting down...')
        raise exception.SignalReceived(signum, 'SIGTERM')
    else:
        log.warning('Received signal number %d, exiting...' % signum)
        raise exception.SignalReceived(signum)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGHUP, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# LMTP Server
def run_server():
    try:
        config = Config(options.config_file)
        server = LMTPServer(config)
        loop()
    except exception.BackendError, e:
        log.error('Server-Init: %s' % e)
        raise
    finally:
        try:
            server.shutdown()
            server.close()
        except:
            pass


# Main
log.warning('%s starting up... (loglevel: %s)'
        % (parser.get_version(), logger.getLogLevelName(log)))

if not options.nodaemon:
    log.debug('Pre-daemonizing PID=%d' % os.getpid())
    daemonize()
    log.debug('Post-daemonizing PID=%d' % os.getpid())

try:
    pid = PidFile(file=options.pid_file)
    pid.write()
except exception.PidFileError, e:
    if e.stalefile:
        log.fatal('Stale pidfile %s present.' % options.pid_file)
        log.fatal('Response-LMTP Daemon already running?')
    else:
        log.fatal('Unable to write to pidfile %s' % options.pid_file)

    log.fatal('Daemon exiting with errors...')
    sys.exit(1)

log.warning('Daemon PID=%d' % pid.pid)

ret = 0
try:
    while True:
        try:
            run_server()
        except exception.SignalReceived, s:
            log.info('Daemon received signal %d (%s)' % (s.signum, s.signame))
            if s.signum == signal.SIGHUP:
                log.warning('Restarting server with new configuration')
                time.sleep(1)
            elif s.signum == signal.SIGINT or s.signum == signal.SIGTERM:
                log.warning('Doing a graceful shutdown...')
                break
        except exception.BackendError, e:
            log.error('Server died due to backend problems: %s' % e)
            log.error('Restarting server in 10 seconds...')
            time.sleep(10)
        except Exception, e:
            log.error('Unhandled exception: %s' % e)
            log.error('Restarting server in 5 seconds...')
            time.sleep(5)
except:
    # Some unhandled exception while looping
    ret = 1
finally:
    log.debug('Cleaning up...')
    pid.delete()

log.info('Daemon shutdown.')
log.warning('Quit.')
sys.exit(ret)

